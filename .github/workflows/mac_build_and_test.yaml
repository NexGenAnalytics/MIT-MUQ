name: MACOS MUQ CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

# Concurrency group: which jobs run together and which cancel each other
concurrency:
  group: ${{ github.event.repository.name }}-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: True

jobs:
  test:
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: true # true -> cancel all jobs if any fails

      matrix:
        config:
          - { os: macos-14, cc: gcc-12, cxx: g++-12}

    env: # environment variables available to all steps
      CC: ${{ matrix.config.cc }}
      CXX: ${{ matrix.config.cxx }}
      MUQ_HOME: ${{ github.workspace }}
      MUQ_BUILD_DIR: ${{ github.workspace }}/../muq_build
      MUQ_INSTALL_DIR: ${{ github.workspace }}/../muq_install
      TPL_WORK_DIR: ${{ github.workspace }}/../tpls_workdir

    steps:
      - name: Check out code
        uses: actions/checkout@v3


      - name: Check environment
        run: |
          echo ======================================================
          echo $(which $CXX) --version
          $CXX --version
          echo ======================================================
          echo $(which cmake) --version
          cmake --version
          echo ======================================================
          echo $(which python) --version
          python --version
          echo ======================================================
          echo Source directory: $MUQ_HOME
          echo TPLs workdir: $TPL_WORK_DIR
          echo ======================================================
          git --version
          cd $MUQ_HOME
          git status
          array=( one two three )
          for i in "${array[@]}"
          do
            echo "$i"
          done

      - name: Build/install TPLs
        run: |
          cd $MUQ_HOME
          # important: we build only the TPLs for serial MUQ
          # we do not need those for the MPI support
          python SupportScripts/build_tpls.py --wdir $TPL_WORK_DIR \
             --with hdf5 nlopt boost sundials eigen nanoflann stanmath

      # - name: Build/install MUQ with Python bindings
      #   run: |
      #     cd $MUQ_HOME
      #     cmake -DCMAKE_C_COMPILER=$CC \
      #           -DCMAKE_CXX_COMPILER=$CXX \
      #           -S $MUQ_HOME -B $MUQ_BUILD_DIR \
      #           -DCMAKE_INSTALL_PREFIX=$MUQ_INSTALL_DIR \
      #           -C $TPL_WORK_DIR/tpls_cache.txt \
      #           -DMUQ_USE_GTEST=ON \
      #           -DMUQ_USE_PYTHON=ON
      #     cd $MUQ_BUILD_DIR
      #     make -j4 install

      # - name: Run Tests
      #   run: |
      #     cd $MUQ_BUILD_DIR
      #     ./RunAllTests

      - name: Build individual utilities groups
        run: |
          array=( UTILITIES_HDF5 UTILITIES_CORE UTILITIES_MULTIINDEX )
          for g in "${array[@]}"
          do
            echo "---------------------------"
            echo "processing ${group}"
            echo "---------------------------"
            cd $MUQ_HOME
            rm -rf $MUQ_BUILD_DIR
            cmake -DCMAKE_C_COMPILER=$CC \
                  -DCMAKE_CXX_COMPILER=$CXX \
                  -S $MUQ_HOME -B $MUQ_BUILD_DIR \
                  -DCMAKE_INSTALL_PREFIX=$MUQ_INSTALL_DIR \
                  -C $TPL_WORK_DIR/tpls_cache.txt \
                  -DMUQ_USE_GTEST=ON \
                  -DMUQ_ENABLEGROUP_${g}=ON \
                  -DMUQ_ENABLEGROUP_DEFAULT=OFF
            cd $MUQ_BUILD_DIR
            make -j4 install
            ./RunAllTests
          done
